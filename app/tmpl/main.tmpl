{{define "html"}}
<html>

<head>
  <title id="title">{{.Appname}}</title>
  <meta charset="UTF-8">
  <link rel="manifest" href="/manifest.json"> <!-- For Progressive Web App -->
  {{template "lib"}}
  {{range .Libs}}
  <script type="text/javascript" src="/static/lib/sand.min.js"></script>
  <script type="text/javascript" src="{{.}}"></script>
  {{end}} {{template "css"}}
  <link rel="stylesheet" href="/static/css/sand.base.css">
  <!-- THEME
  -->
  {{range .Styles}}
  <link rel="stylesheet" href="{{.}}"> {{end}}
<style>
.hide {
    display:none;
}
</style>
</head>

<body style="height:100%">
  {{template "menu"}} 
    <div id="notify" class="hide" style="font-size:18px;height:30px">A new version of this app is available. Click <a id="reload">here</a> to update.</div>
  {{template "wrapper"}} 
  {{ template "modal"}} 
  {{ template "modalLoad"}} 
  {{ template "modalSave"}} 
  {{ template "modalPrompt"}}
</body>
<script>
  var eventHub;
  var url = window.location.href
  var arr = url.split("/");
  var domain = arr[0] + "//" + arr[2];
  var server = ""; //TODO
  var app = {};
  var sandUser
  var sandHeaders = new Headers({})
  var sandInits = {credentials:"include"}
  var mode
  var win
  var winid
  var fixedLayout
  var initedLayout
  var lite = 0
  var dev = 0
  if (location.protocol != "https:") {
      d3.selectAll(".httpsOnly").style("display","none")
  }
 
  sand.waitForWebfonts(["Roboto Mono"],function(){
  (function($, d3, S) {
    /* init theme */
    mode = "web" //other modes obsoleted
    dev = S.toolsGetUrlPara("dev") || 0
      if (dev == 1) {
          d3.select("#devMode").style("display","")
      }
    win = S.toolsGetUrlPara("win") || "main"
    winid = S.toolsGetUrlPara("winid") || -1
    fixedLayout = S.toolsGetUrlPara("fixedLayout") || 0 //0 is false
    initedLayout = S.toolsGetUrlPara("initedLayout") || undefined // hub,gsheet et al.
    lite = S.toolsGetUrlPara("lite") || 0 //remove google user system is lite is 1
    if (win == "ext") {
      d3.select("body").classed("extWin",true)
      $(".mainWinOnly").hide()
      $("#title").text("Extend Window " + winid) 
    } else {
      d3.select("body").classed("mainWin",true)
    }
    var theme = S.initTheme();
    

    var renders = eval({{.Renders}}); //TODO ADD Interface
      var renderList = Object.keys(renders).sort(function(a,b){
            return renders[a].idx - renders[b].idx 
      })
    var dispatch = d3.dispatch("sendMessage", "receiveMessage", "initWindows", "initPanels", "input", "resize", "sendState", "saveState", "add", "exportState", "exportStates", "exportStatesToFile", "setState", "importState", "importStates",
      "openExt","closeExt","renderExtWinNav", "loadPanel",
      "saveSession", "loadSession", "shareSession", "saveToSheet", "loadFromSheet", "saveToGSheet", "refreshWorkSpace")
    var message = {}
    var app = {}
    d3.json("/userinfo",{credentials:"same-origin"}).then(function(d){
      sandUser=d
      sandHeaders = new Headers({"Authorization":"Basic "+btoa(sandUser.email)}) //Authorization for future data server 
      sandInits["headers"] = sandHeaders
    }).catch(function(e){
    })
    d3.select("#logo")
      .attr("title","{{.Appname}}")
      /*
      .on("click",function(){
        window.open("/entry/")
      })
      */

    var M = S.initMenu().renders(renders).renderList(renderList).dispatch(dispatch);
    M();
    window.PanelManager = S.NewPanelManager()
      .dispatch(dispatch)
      .renders(renders)
      .renderList(renderList)
      .app(app)

    PanelManager();

    $('[data-toggle="tooltip"]').tooltip()
    if (fixedLayout) {
      document.body.className += ' ' + 'fixedLayout';
    }
    if (lite) {
      document.body.className += ' ' + 'liteVersion';
    }
    var cfg = S.toolsGetUrlPara("config")
    var W = S.NewWindowManager().dispatch(dispatch).theme(theme).domain(domain).P(PanelManager).win(win).config(cfg).extId({{.ExtID}}).initedLayout(initedLayout) //app(app) //init windows manager
    W();
    var emptyCfg = {
      "settings": {
        "showPopoutIcon": false
      },
      "dimensions": {
        "borderWidth": 2
      },
      "content": [{
        "type": "row",
        "content": []
      }]
    }
    

    var _get = async function(d) {
        if (renders[d]) {
          emptyCfg.content[0].content.push({
            "type": "component",
            "componentName": "canvas",
            "title": renders[d].label || d,
            "componentState": {
              "render": d,
               "name": renders[d].label || d,
            }
          })
        } else if (d.match(/space:\S+/)) {
          var nbPanel = localforage.createInstance({
            "name": "nbPanel"
          })
          var _id = d.split(":")[1]
         await nbPanel.getItem(_id).then(function(d){
           var d = JSON.parse(d)
            emptyCfg.content[0].content.push({
             "type": "component",
            "componentName": "canvas",
            "title": _id,
             "componentState":d,
            })
         }).catch(function(e){
             console.log(e)
         })
        } else if (d.match(/tracks:\S+/)) { //localforage load composed tracks 

        }
    }



    if (!cfg && initedLayout) { //config override the initedLayout
      var ds = initedLayout.split(",")
      var _init = async function(){
        for (var i=0;i<ds.length;i++) {
          await _get(ds[i])         
        } 
        dispatch.call("initPanels", this, emptyCfg)
      }
      _init()
    }
    if (cfg) {
        if (cfg.match(/gsheet:\S+:\S+/)) {
            window._renderGsheet = function(d) {
                var config = JSON.parse(d.table.rows[0].c[2].v)
                if (config[-1] || config["states"]) { //windows format
                    dispatch.call("initWindows", this, config)
                } else { // one window format
                    dispatch.call("initPanels", this, config)
                }
            }
            var a = cfg.split(":")
            S.gsheetQuery("select * where A='" + a[2] + "'", a[1], "_renderGsheet")
        }
        if (cfg.match(/localstorage:\S+/) ){
            var a = cfg.split(":")
            var sessionDb = localforage.createInstance({
                "name": "nbSession"
            })
            sessionDb.getItem(a[1]).then(function(d){
                dispatch.call("initWindows", this, JSON.parse(d.data))
             })
        }
        
        if (cfg != "continue" && !cfg.match(/localstorage:\S+/) && !cfg.match(/gsheet:\S+:\S+/)) {
            $(".menu .note").hide()
            fetch(server + cfg, sandInits)
                .then(function(d){
                    return d.json()
                })
                .then(function(config) {
                if (config[-1] || config["states"]) { //windows format
                    dispatch.call("initWindows", this, config)
                } else { // one window format
                    dispatch.call("initPanels", this, config)
                }
            }).catch(function(e){
                console.log(e)
                dispatch.call("initPanels", this, emptyCfg)
            })
        }
    } 

    if (!cfg && !initedLayout) {
      if (win == "main") {
        $(".menu .note").show()
      }
      dispatch.call("initPanels", this, emptyCfg)
    }
    

    window.onresize = function() {
        if ($("#menuContainer").css("display")=="block") {
            $("#layoutContainer").css('width',"100%").css("width","-=200px").css("left", "200px")
        }
        dispatch.call("resize", this, {})
    }
    history.pushState({},"main","/v1/main.html")

  })(jQuery, d3, sand)
});
</script>
{{range .Tail}}
<script type="text/javascript" src="{{.}}"></script>
{{end}}
<html>
{{end}}
