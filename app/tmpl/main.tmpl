{{define "html"}}
<html>

<head>
  <title id="title">{{.Appname}}</title>
  {{template "lib"}}
  <script type="text/javascript" src="/web/lib/sand.min.js"></script>
  {{range .Libs}}
  <script type="text/javascript" src="{{.}}"></script>
  {{end}} {{template "css"}}

  <link rel="stylesheet" href="/web/style/sand.base.css">
  <!-- THEME
  -->
  {{range .Styles}}
  <link rel="stylesheet" href="{{.}}"> {{end}}
</head>

<body style="height:100%">
  {{template "menu"}} {{template "wrapper"}} {{ template "modal"}} {{ template "modalLoad"}} {{ template "modalSave"}} {{ template "modalPrompt"}}
</body>
<script>
  var eventHub;
  var isAstilectron = false;
  var url = window.location.href
  var arr = url.split("/");
  var domain = arr[0] + "//" + arr[2];
  var server = ""; //TODO
  var app = {};
  var sandUser
  var sandHeaders = new Headers({})
  //var sandInits = {credentials:"same-origin"}
  var sandInits = {credentials:"include"}
  var mode
  var win
  var winid
  var fixedLayout
  var initedLayout
  var lite = 0
  window.addEventListener("dragover", function(e) {
    e = e || event;
    e.preventDefault();
  }, false);
  window.addEventListener("drop", function(e) {
    e = e || event;
    e.preventDefault();
  }, false);
 /*
 $(window).bind('storage', function (e) {
     console.log(e.originalEvent.key, e.originalEvent.newValue);
 });
 */

 function waitForWebfonts(fonts, callback) {
    var loadedFonts = 0;
    for(var i = 0, l = fonts.length; i < l; ++i) {
        (function(font) {
            var node = document.createElement('span');
            // Characters that vary significantly among different fonts
            node.innerHTML = 'giItT1WQy@!-/#';
            // Visible - so we can measure it - but not on the screen
            node.style.position      = 'absolute';
            node.style.left          = '-10000px';
            node.style.top           = '-10000px';
            // Large font size makes even subtle changes obvious
            node.style.fontSize      = '300px';
            // Reset any font properties
            node.style.fontFamily    = 'sans-serif';
            node.style.fontVariant   = 'normal';
            node.style.fontStyle     = 'normal';
            node.style.fontWeight    = 'normal';
            node.style.letterSpacing = '0';
            document.body.appendChild(node);

            // Remember width with no applied web font
            var width = node.offsetWidth;

            node.style.fontFamily = font;

            var interval;
            function checkFont() {
                // Compare current width with original width
                if(node && node.offsetWidth != width) {
                    ++loadedFonts;
                    node.parentNode.removeChild(node);
                    node = null;
                }

                // If all fonts have been loaded
                if(loadedFonts >= fonts.length) {
                    if(interval) {
                        clearInterval(interval);
                    }
                    if(loadedFonts == fonts.length) {
                        callback();
                        return true;
                    }
                }
            };

            if(!checkFont()) {
                interval = setInterval(checkFont, 50);
            }
        })(fonts[i]);
    }
};
waitForWebfonts(["Roboto Mono"],function(){
  (function($, d3, S) {
    /* init theme */
    mode = S.toolsGetUrlPara("mode") || "web"
    win = S.toolsGetUrlPara("win") || "main"
    winid = S.toolsGetUrlPara("winid") || -1
    fixedLayout = S.toolsGetUrlPara("fixedLayout") || 0 //0 is false
    initedLayout = S.toolsGetUrlPara("initedLayout") || undefined //0 is false
    lite = S.toolsGetUrlPara("lite") || 0 //rm google user system is lite is 1
    if (win == "ext") {
      d3.select("body").classed("extWin",true)
      $("#myNavRight").hide() //hide session ctrl
      $("#openExt").hide()
      $("#home").hide()
      $("#title").text("Extend Window " + winid) //TODO Set Id
      //TODO Add Main Window Link
    } else {
      d3.select("body").classed("mainWin",true)
    }
    var theme = S.initTheme();

    var renders = eval({{.Renders}});
    var renderList = Object.keys(renders).sort()
    //interface for add other input
    var dispatch = d3.dispatch("sendMessage", "receiveMessage", "initWindows", "initPanels", "input", "resize", "sendState", "saveState", "add", "exportState", "exportStates", "exportStatesToFile", "setState", "importState", "importStates",
      "saveToElectron", "openExt","closeExt","renderExtWinNav", "loadPanel",
      "electron", "saveSession", "loadSession", "shareSession", "saveToSheet", "loadFromSheet", "saveToGSheet", "refreshWorkSpace")
    //saveToGSheet is for electron
    var message = {}
    var app = {}
    d3.json("/userinfo",{credentials:"same-origin"}).then(function(d){
      sandUser=d
      sandHeaders = new Headers({"Authorization":"Basic "+btoa(sandUser.email)})
      sandInits["headers"] = sandHeaders
    })
    d3.select("#logo")
      .attr("title","Click to open introduction")
      .on("click",function(){
        window.open("/static/")
      })
    d3.select("#appinfo").text("{{.Appname}} v{{.Version}}")

    var M = S.initMenu().renders(renders).renderList(renderList).dispatch(dispatch);
    M();
    window.PanelManager = S.NewPanelManager()
      .dispatch(dispatch)
      .renders(renders)
      .renderList(renderList)
      .app(app)

    PanelManager();

    if (fixedLayout) {
      document.body.className += ' ' + 'fixedLayout';
    }
    if (lite) {
      document.body.className += ' ' + 'liteVersion';
    }
    /* TODO add functions to Init Some Renders */
    var emptyCfg = {
      "settings": {
        "showPopoutIcon": false
      },
      "dimensions": {
        "borderWidth": 2
      },
      "content": [{
        "type": "row",
        "content": []
      }]
    }
    var cfg = S.toolsGetUrlPara("config")
    if (!cfg && initedLayout) { //config override the initedLayout
      initedLayout.split(",").forEach(function(d) {
        if (renders[d]) {
          emptyCfg.content[0].content.push({
            "type": "component",
            "componentName": "canvas",
            "title": renders[d].label || d,
            "componentState": {
              "render": d,
            }
          })
        }
      })
    }

    if (S.toolsGetBrowserType() == "electron" && cfg == "continue") {
      //TODO : for parameters in uri passing
      window.location = "/v1/main.html?mode=app&win=main"
    }
    if (mode == "app") {
      $("#share").hide();
      mode = "app"
      var dialogE = require("electron").remote.dialog;
      document.addEventListener('astilectron-ready', function() {
        isAstilectron = true
        console.log("astelectron ready")
        var E = S.NewElectronManager().dispatch(dispatch).dialogE(dialogE).astilectron(astilectron).P(PanelManager) //.app(app)
        E()
      })
    } else if (mode == "web" && win == "main") { //any other condition
      var W = S.NewWindowManager().dispatch(dispatch).theme(theme).domain(domain).P(PanelManager).win(win).config(cfg).chromeExtID({{.ExtID}}) //app(app) //init windows manager
      W();
    } else if (mode == "web" && win == "ext") {
        var W1 = S.NewWindowManager().dispatch(dispatch).theme(theme).domain(domain).P(PanelManager).win(win).config(cfg).chromeExtID({{.ExtID}}) //app(app) //init windows manager
      W1();
    }
    /* TO USE PUBLIC GSHEET */
    window._renderGsheet = function(d) {
      var config = JSON.parse(d.table.rows[0].c[2].v)
      if (config[-1] || config["states"]) { //windows format
        dispatch.call("initWindows", this, config)
      } else { // one window format
        dispatch.call("initPanels", this, config)
      }
    }

    if (cfg && cfg.match(/gsheet:\S+:\S+/)) {
      var a = cfg.split(":")
      S.gsheetQuery("select * where A='" + a[2] + "'", a[1], "_renderGsheet")
    } else if (cfg && cfg != "continue") {
      $(".menu .note").hide()
      d3.json(server + cfg, sandInits).then(function(config) {
        if (config[-1] || config["states"]) { //windows format
          dispatch.call("initWindows", this, config)
        } else { // one window format
          dispatch.call("initPanels", this, config)
        }
      })
    } else if (!cfg) {
      if (win == "main") {
        $(".menu .note").show()
      }
      dispatch.call("initPanels", this, emptyCfg)
    } 

    window.onresize = function() {
      dispatch.call("resize", this, {})
    }
  })(jQuery, d3, sand)
});
</script>
{{range .Tail}}
<script type="text/javascript" src="{{.}}"></script>
{{end}}
<html>
{{end}}
